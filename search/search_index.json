{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"base-template","text":"<p>A base template for CI/CD workflows with MkDocs and Semantic Release</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#create-a-new-repository","title":"Create a new repository","text":"<ol> <li>Click the <code>Use this template</code> button</li> <li>Enter a name for your repository</li> <li>Click <code>Create repository from template</code></li> </ol>"},{"location":"#add-secrets-for-github-actions","title":"Add secrets for GitHub Actions","text":"<ol> <li>Go to the <code>Settings</code> tab of your repository</li> <li>Click <code>Secrets</code> in the left sidebar</li> <li>Click <code>New repository secret</code></li> <li>Add the following secrets:</li> </ol> Name Value GITHUB_TOKEN <code>${{ secrets.GITHUB_TOKEN }}</code> NPM_TOKEN <code>${{ secrets.NPM_TOKEN }}</code>"},{"location":"#initial-release","title":"Initial release","text":"<p>Push a commit to the <code>main</code> branch with the message <code>feat: initial commit</code></p>"},{"location":"#github-pages","title":"GitHub Pages","text":"<ol> <li>Modify the contents of the <code>mkdocs.yaml</code> file</li> <li>Add content to the <code>docs</code> folder</li> <li>Push a commit to the <code>main</code> branch</li> <li>Wait for the <code>Publish docs via GitHub Pages</code> workflow to complete</li> <li>Go to the <code>Settings</code> tab of your repository</li> <li>Scroll down to the <code>pages</code> section</li> <li>Select <code>Deploy from a branch</code> as the source</li> <li>Select <code>gh-pages</code> as the branch and <code>/(root)</code> as the folder, then click <code>Save</code></li> </ol>"},{"location":"#features","title":"Features","text":"<ul> <li>[x] Linting</li> <li>[x] Automated Release Draft</li> <li>[x] Semantic versioning</li> <li>[x] Documentation to PDF</li> <li>[x] Github Pages deployment (MkDocs)</li> </ul>"},{"location":"#workflows","title":"Workflows","text":""},{"location":"#ci-continuous-integration","title":"CI (Continuous Integration)","text":""},{"location":"#lint","title":"Lint","text":"<p>The <code>Lint</code> workflow is automatically triggered whenever there is push activity in <code>main</code> or pull request activity towards <code>main</code>. It has one job:</p> <ul> <li>Lint the codebase with GitHub's Super-Linter.</li> </ul>"},{"location":"#cd-continuous-deployment","title":"CD (Continuous Deployment)","text":""},{"location":"#docs-to-pdf","title":"Docs to PDF","text":"<p>The <code>Docs to PDF</code> workflow is automatically triggered whenever there is push activity in <code>main</code> or pull request activity towards <code>main</code>. It has one job:</p> <ul> <li>Build the documentation to PDF with Markdown to PDF</li> </ul>"},{"location":"#release","title":"Release","text":"<p>The <code>Release</code> workflow is automatically triggered whenever there is push activity in <code>main</code> or pull request activity towards <code>main</code>. It has one job:</p> <ul> <li>Create a release draft with semantic-release</li> </ul>"},{"location":"#publish-docs-via-github-pages","title":"Publish docs via GitHub Pages","text":"<p>The <code>Publish docs via GitHub Pages</code> workflow is automatically triggered whenever there is push activity in <code>main</code> or pull request activity towards <code>main</code>. It has one job:</p> <ul> <li>Publish the documentation to GitHub Pages with MkDocs</li> </ul>"},{"location":"#semantic-release","title":"Semantic Release","text":""},{"location":"#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when too much pressure applied</code> ~~Patch~~ Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> ~~Minor~~ Feature Release <code>perf(pencil): remove graphiteWidth option</code><code>BREAKING CHANGE: The graphiteWidth option has been removed.</code><code>The default graphite width of 10mm is always used for performance reasons.</code> ~~Major~~ Breaking Release  (Note that the <code>BREAKING CHANGE:</code> token must be in the footer of the commit)"},{"location":"#automation-with-ci","title":"Automation with CI","text":"<p>semantic-release is meant to be executed on the CI environment after every successful build on the release branch. This way no human is directly involved in the release process and the releases are guaranteed to be unromantic and unsentimental.</p>"},{"location":"#triggering-a-release","title":"Triggering a release","text":"<p>For each new commit added to one of the release branches (for example: <code>main</code>, <code>next</code>, <code>beta</code>), with <code>git push</code> or by merging a pull request or merging from another branch, a CI build is triggered and runs the <code>semantic-release</code> command to make a release if there are codebase changes since the last release that affect the package functionalities.</p>"},{"location":"#derived-templates","title":"Derived Templates","text":"<p>This template is used to create the following templates:</p> <ul> <li>python-template</li> <li>pypi-template</li> <li>jupyter-book-template</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>Semantic Versioning</li> <li>Conventional Commits</li> <li>semantic-release</li> <li>Semantic Release Action</li> <li>Git Semantic Version</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is released under the MIT License.</p>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#105-2023-02-15","title":"1.0.5 (2023-02-15)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>reconfigure releaserc as json file (0d60028)</li> </ul>"},{"location":"CHANGELOG/#104-2023-02-15","title":"1.0.4 (2023-02-15)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>order of plugins and setting for release (67e7832)</li> </ul>"},{"location":"CHANGELOG/#103-2023-02-15","title":"1.0.3 (2023-02-15)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>update releaserc for github assets (36a212d)</li> </ul>"},{"location":"CHANGELOG/#102-2023-02-15","title":"1.0.2 (2023-02-15)","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>move CHANGELOG under the docs (89e3d74)</li> </ul>"},{"location":"CHANGELOG/#101-2023-02-15","title":"1.0.1 (2023-02-15)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>update template configs (dd98a1a)</li> </ul>"},{"location":"markdown-to-pdf/","title":"Markdown to PDF","text":"<p>Creates PDF and HTML files from Markdown using the GitHub (or custom) theme.</p>"},{"location":"markdown-to-pdf/#notable-features","title":"Notable Features","text":"<ul> <li>Code highlighting</li> <li>Tables</li> <li>Images (see docs)</li> <li>Internal and external links</li> </ul>"},{"location":"markdown-to-pdf/#github-action-inputs","title":"GitHub Action Inputs","text":""},{"location":"markdown-to-pdf/#input-path","title":"Input Path","text":"<pre><code>with:\n  input_path: value\n</code></pre> <p>(Required) (Path) or (File) The location of the folder containing your .md or .markdown files, or a path to a single .md or .markdown file that you would like to convert.</p> <p>*Note, previous versions of this action accepted the <code>input_dir</code> input. This is still accepted as input for backwards compatibility, but passing a directory as <code>input_path</code> now carries out the same functionality.</p>"},{"location":"markdown-to-pdf/#images-directory","title":"Images Directory","text":"<pre><code>with:\n  images_dir: value\n</code></pre> <p>(Path) The location of the folder containing your images, this should be the route of all images. So of you had images located at <code>images/about/file.png</code> and <code>images/something-else/file.png</code> you would pass the value <code>images</code>.</p>"},{"location":"markdown-to-pdf/#output-directory","title":"Output Directory","text":"<pre><code>with:\n  output_dir: value\n</code></pre> <p>(Path) The location of the folder you want to place the built files.</p>"},{"location":"markdown-to-pdf/#image-import-prefix","title":"Image Import Prefix","text":"<pre><code>with:\n  image_import: value\n</code></pre> <p>(String) The path you use to import your images that can be replaced with the server URL. For example if you had <code>&lt;img src=\"./images/something-else/file.\"&gt;</code> you would pass <code>./images</code> as this is replaced by <code>https://localhost:3000</code> during the build process.</p>"},{"location":"markdown-to-pdf/#build-html","title":"Build HTML","text":"<pre><code>with:\n  build_html: value\n</code></pre> <p>(Boolean) Whether to also create a .html file.</p>"},{"location":"markdown-to-pdf/#build-pdf","title":"Build PDF","text":"<pre><code>with:\n  build_pdf: value\n</code></pre> <p>(Boolean) Whether to also create a .pdf file (defaults to <code>true</code>. After all, this is the intended behaviour).</p>"},{"location":"markdown-to-pdf/#css-theme","title":"CSS Theme","text":"<pre><code>with:\n  theme: value\n</code></pre> <p>(File) The location of the CSS file you want to use as the theme.</p> <pre><code>with:\n  extend_default_theme: value\n</code></pre> <p>(Boolean) Whether to extend your custom CSS file with the default theme</p>"},{"location":"markdown-to-pdf/#highlight-css-theme","title":"Highlight CSS Theme","text":"<pre><code>with:\n  highlight_theme: value\n</code></pre> <p>(File) The location of the CSS file you want to use as the code snipped highlight theme.</p>"},{"location":"markdown-to-pdf/#htmlmustache-template-file","title":"HTML/Mustache Template file","text":"<pre><code>with:\n  template: value\n</code></pre> <p>(File) The location of the HTML/Mustache file you want to use as the HTML template.</p>"},{"location":"markdown-to-pdf/#table-of-contents","title":"Table Of Contents","text":"<pre><code>with:\n  table_of_contents: value\n</code></pre> <p>(Boolean) Whether a table of contents should be generated</p>"},{"location":"markdown-to-pdf/#input-types","title":"Input Types","text":"<p>A few pieces to describe what input each value expects.</p>"},{"location":"markdown-to-pdf/#path","title":"Path","text":"<p>A path will most likely be from your repository's route, it should not be prefixed or suffixed with a <code>/</code>. The path should look like so <code>docs/topic/featureDocs</code> or <code>writing/category</code>.</p>"},{"location":"markdown-to-pdf/#string","title":"String","text":"<p>A string could be anything, and using <code>YAML</code> (or <code>YML</code>) does not need to be encased in quotes.</p>"},{"location":"markdown-to-pdf/#boolean","title":"Boolean","text":"<p>This should be either <code>true</code> or <code>false</code>.</p>"},{"location":"markdown-to-pdf/#file","title":"File","text":"<p>This should be the direct path to a file, it should not be prefixed with a <code>/</code>. An example: <code>styles/markdown-theme.css</code>.</p>"},{"location":"markdown-to-pdf/#usage-examples","title":"Usage Examples","text":"<p>An example of a workflow for some documentation.</p> <pre><code># .github/workflows/convert-to-pdf.yml\n\nname: Docs to PDF\n# This workflow is triggered on pushes to the repository.\non:\n  push:\n    branches:\n      - main\n    # Paths can be used to only trigger actions when you have edited certain files, such as a file within the /docs directory\n    paths:\n      - \"docs/**.md\"\n      - \"docs/images/**\"\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: baileyjm02/markdown-to-pdf@v1\n        with:\n          input_dir: docs\n          output_dir: pdfs\n          images_dir: docs/images\n          # for example &lt;img src=\"./images/file-name.png\"&gt;\n          image_import: ./images\n          # Default is true, can set to false to only get PDF files\n          build_html: false\n      - uses: actions/upload-artifact@v1\n        with:\n          name: docs\n          path: pdfs\n</code></pre>"}]}